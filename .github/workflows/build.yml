name: dotnet package

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      - name: Setup dotnet
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'
      - name: Install dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore -c Release
      - name: Test with dotnet
        run: dotnet test --no-restore --logger trx --results-directory "TestResults"
      - name: Upload dotnet test results
        uses: actions/upload-artifact@v4
        with:
          name: networking-bot-tests-results
          path: TestResults
        if: ${{ always() }}
      - name: Package bot
        run: dotnet publish NetworkingBot/NetworkingBot.csproj --no-restore --no-build -o build/ -c Release /p:UseAppHost=false
      - name: Upload binaries
        uses: actions/upload-artifact@v4
        with:
          name: networking-bot
          path: build
  package:
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/networking-bot-')
    needs: build
    steps:
      - uses: actions/checkout@v4
      - name: Set Version
        run: echo "BOT_VERSION=${GITHUB_REF#refs/tags/networking-bot-}" >> $GITHUB_ENV
      - name: Login to Yandex Cloud Container Registry
        id: login-cr
        uses: yc-actions/yc-cr-login@v3
        with:
          yc-sa-json-credentials: ${{ secrets.YC_CONTAINER_REGISTRY_CREDENTIALS }}
      - uses: actions/download-artifact@v4
        with:
          name: networking-bot
          path: build
      - name: Build, tag, and push image to Yandex Cloud Container Registry
        env:
          CR_REGISTRY: ${{ secrets.YC_CONTAINER_REGISTRY }}
          CR_REPOSITORY: networking-bot
          IMAGE_TAG: ${{ env.BOT_VERSION }}
        run: |
          docker build -f NetworkingBot/Dockerfile build -t cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
          docker push cr.yandex/$CR_REGISTRY/$CR_REPOSITORY:$IMAGE_TAG
  verify-tf:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4

      - name: Setup Tf Repos
        run: |
          cat <<EOF >>~/.terraformrc
          provider_installation {
              network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
              direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
      - name: Setup Tf State config
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run: |
          cat <<EOF >config.s3.tfbackend
          access_key="$ACCESS_KEY"
          secret_key="$SECRET_KEY"
          EOF

      - name: Setup Tf Api Key
        env:
          YC_KEY: ${{ secrets.YC_KEY }}
        run: echo "$YC_KEY" > key.json


      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Terraform init
        id: init
        run: terraform init -backend-config=config.s3.tfbackend

      - name: Terraform format
        id: fmt
        run: terraform fmt -check -diff

      - name: Terraform validate
        id: validate
        run: terraform validate
    
  plan-tf:
    runs-on: ubuntu-latest
    if: startsWith(github.event.ref, 'refs/tags/networking-bot-')
    needs:
      - package
      - verify-tf
    defaults: 
      run: 
        working-directory: ./iac
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4
      
      - name: Setup Tf Repos 
        run: |
          cat <<EOF >>~/.terraformrc
          provider_installation {
              network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
              direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
      - name: Setup Tf State config
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run:  |
          cat <<EOF >config.s3.tfbackend
          access_key="$ACCESS_KEY"
          secret_key="$SECRET_KEY"
          EOF
      
      - name: Setup Tf Api Key
        env:
          YC_KEY: ${{ secrets.YC_KEY }}
        run: echo "$YC_KEY" > key.json
              
      
      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Terraform init
        id: init
        run: terraform init -backend-config=config.s3.tfbackend
        
      - name: Set Version
        run: echo "BOT_VERSION=${GITHUB_REF#refs/tags/networking-bot-}" >> $GITHUB_ENV
        
      - name: Terraform plan
        id: plan
        env:
          BOT_VERSION: ${{ env.BOT_VERSION }}
        run: terraform plan -no-color -input=false -var="app_version=$BOT_VERSION" -out="planfile"
        continue-on-error: true
        
      - uses: actions/github-script@v6
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            
            <details><summary>Show Plan</summary>
            
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
            
            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
            
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
      - name: Upload plan
        uses: actions/upload-artifact@v4
        with:
          name: networking-bot-planfile
          path: planfile

  apply-tf:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./iac
    if: startsWith(github.event.ref, 'refs/tags/networking-bot-')
    needs:
      - package
      - verify-tf
    steps:
      - name: Checkout the repository to the runner
        uses: actions/checkout@v4

      - name: Setup Tf Repos
        run: |
          cat <<EOF >>~/.terraformrc
          provider_installation {
              network_mirror {
              url = "https://terraform-mirror.yandexcloud.net/"
              include = ["registry.terraform.io/*/*"]
            }
              direct {
              exclude = ["registry.terraform.io/*/*"]
            }
          }
          EOF
      - name: Setup Tf State config
        env:
          ACCESS_KEY: ${{ secrets.ACCESS_KEY }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
        run:  |
          cat <<EOF >config.s3.tfbackend
          access_key="$ACCESS_KEY"
          secret_key="$SECRET_KEY"
          EOF

      - name: Setup Tf Api Key
        env:
          YC_KEY: ${{ secrets.YC_KEY }}
        run: echo "$YC_KEY" > key.json
      
      - uses: actions/download-artifact@v4
        with:
          name: networking-bot-planfile
          path: planfile

      - name: Setup Terraform with specified version on the runner
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.8.5

      - name: Terraform init
        id: init
        run: terraform init -backend-config=config.s3.tfbackend
        
      - name: Set Version
        run: echo "BOT_VERSION=${GITHUB_REF#refs/tags/networking-bot-}" >> $GITHUB_ENV

      - name: Terraform apply
        id: plan
        run: terraform apply -auto-approve "planfile"
